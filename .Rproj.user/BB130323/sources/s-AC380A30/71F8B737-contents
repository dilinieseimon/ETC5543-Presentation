---
title: "Vegetation"
output:
  html_document:
    toc: true
    toc_float: true
    number_sections: false
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
```

## MODIS (Moderate Resolution Imaging Spectroradiometer)

MODIS is an instrument aboard the Terra and Aqua satellites, which orbits the entire Earth every 1-2 days, acquiring data at different spatial resolutions. The data acquired by MODIS describes features of the land, oceans and the atmosphere. A complete list of MODIS data products can be found on the [MODIS website](https://modis.gsfc.nasa.gov/data/dataprod/).

## Downloading Vegetation data using `MODIStsp`

`MODIStsp` an acronym for 'MODIS Time Series Processing', is an R-package for downloading and preprocessing time series of raster data from MODIS data products. This tutorial will focus on downloading and visualising vegetation data, but the same process can be followed with other MODIS data products as well.

### Installing `MODIStsp`

The `MODIStsp` package can be simply downloaded from CRAN as follows

```{r install-MODItsp, eval=FALSE}
install.packages("MODIStsp")
```

### Identifying the MODIS data product

The first step of downloading data is to identify which [MODIS data product](https://modis.gsfc.nasa.gov/data/dataprod/) to use.

This tutorial will use the [MODIS Vegetation Index Products (NDVI and EVI)](https://modis.gsfc.nasa.gov/data/dataprod/mod13.php), which are two primary vegetation layers; the Normalized Difference Vegetation Index and the Enhanced Vegetation Index. This product will contain data produced on 16-day periods as well as monthly temporal averaged data, in 3 spatial resolutions (250m, 500m and 1km).

The product IDs for each of these products can also be found on the  [data product page](https://modis.gsfc.nasa.gov/data/dataprod/mod13.php). 

This tutorial will use the 'Vegetation Indices 16-Day L3 Global 250' product with the product IDs MOD13Q1(Terra Product ID), and MYD13Q1(Aqua Product ID), but will be represented by M\*D13Q1 - the second character is replaced by an asterix(\*) to identify both Terra and Aqua.

### Retreiving MODIS layers for a product

The product layers (original MODIS layers, quality layers and spectral indexes) available for a given product can be retreived using the following function.

```{r modis-get-productlayers, attr.output='style="max-height: 200px;"'}
library(MODIStsp)
MODIStsp_get_prodlayers("M*D13Q1")
```

Note how the \$bandfullnames define each of the \$bandnames, the \$quality_fullnames define the \$quality_bandnames, and the \$indexes_fullnames define the \$indexes_bandnames.

### The `MODIStsp()` function

`MODItsp()` is the main function of the `MODIStsp` package, and allows us to download MODIS data products. While this is a very comprehensive function and we will use only a very few arguments, the entire list of arguments can be found in the [`MODItsp` documentation](https://docs.ropensci.org/MODIStsp/reference/MODIStsp.html).

The `MODIStsp()` function provides two ways of downloading data; either through a GUI (interactively) or through an R script (non-interactively). This tutorial will focus on the non-interactive execution.

### Downloading NDVI data

To download the NDVI in Mongolia, first we download the map of Mongolia with the `geoboundaries()` function of the `rgeoboundaries` package and save it on our computer.

```{r downloading-shapefile}
library(rgeoboundaries)
library(sf)

mongolia_boundary <- geoboundaries("Mongolia")
spatial_filepath <- "VegetationData/mongolia.shp"
st_write(mongolia_boundary, paste0(spatial_filepath))
```

To download data in Mongolia, we use the boundary of Mongolia we downloaded. So in the `MODIStsp()` function we set the `spatmeth` argument as `"file"` and set the `spafile` argument as the path of the map we saved.

Since vegetation data can be categorised as spatio-temporal data, the `start-date` and `end_date` arguments define the period for which we want the data to be downloaded. Here we note that the NDVI index is generated at 16-day composite eight days apart.

```{r downloading-data, eval=FALSE}
library(MODIStsp)

MODIStsp(gui             = FALSE,
         out_folder      = "VegetationData",
         out_folder_mod  = "VegetationData",
         selprod         = "Vegetation_Indexes_16Days_1Km (M*D13A2)",
         bandsel         = "NDVI", 
         user            = "mstp_test" ,
         password        = "MSTP_test_01",
         start_date      = "2020.06.01", 
         end_date        = "2020.06.17", 
         verbose         = FALSE,
         spatmeth        = "file",
         spafile         = spatial_filepath,
         out_format = "GTiff")
```

## Understanding the downloaded data

The downloaded files are saved in subfolders within the defined output folder.

A separate subfolder is created for each processed original MODIS layer, Quality Indicator or Spectral Index with an image for each processed date. The images will be named using the following naming convention.

`<defined_out_folder>/<product_name>/<layer_name>/<prodcode>_<layername>_<YYYY>_<day_of_year>.<extension>`

ENVI and/or GDAL virtual time series files and RasterStack RData objects are stored in a 'Time_Series' subfolder, and will use the following naming convention.

`<defined_out_folder>/<product_name>/Time_Series/<virtual_file_type>/<sensor_name>/<layer_name>/<prodcode>_<layername>_<start_day_of_year>_<start_YYYY>_<end_day_of_year>_<end_YYYY>.<extension>`


## NDVI in Mongolia

Normalized Difference Vegetation Index

```{r}
library(raster)
library(here)
library(ggplot2)
library(viridis)

NDVI_raster <- raster(here::here("VegetationData/mongolia/VI_16Days_1Km_v6/NDVI/MYD13A2_NDVI_2020_153.tif"))
NDVI_raster <- projectRaster(NDVI_raster, crs = "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
NDVI_raster <- raster::mask(NDVI_raster, as_Spatial(mongolia_boundary))

# Converting the raster object into a dataframe
NDVI_df <- as.data.frame(NDVI_raster, xy = TRUE, na.rm = TRUE)
rownames(NDVI_df) <- c()
# Divide values by 10000 to have NDVI values between -1 and 1
ggplot() + 
  geom_raster(data = NDVI_df,
              aes(x = x, y = y, fill = MYD13A2_NDVI_2020_153/10000)) +
  geom_sf(data = mongolia_boundary, inherit.aes = FALSE, fill = NA) +
  scale_fill_viridis()
  
```

## Examples

The following is a complete example on downloading and visualising NDVI data in Mongolia

```{r eval = FALSE}
library(rgeoboundaries)
library(sf)
library(MODIStsp)

mongolia_boundary <- geoboundaries("Mongolia")
spatial_filepath <- "VegetationData/mongolia.shp"
st_write(mongolia_boundary, paste0(spatial_filepath))

MODIStsp(gui             = FALSE,
         out_folder      = "VegetationData",
         out_folder_mod  = "VegetationData",
         selprod         = "Vegetation_Indexes_16Days_1Km (M*D13A2)",
         bandsel         = "NDVI", 
         user            = "mstp_test" ,
         password        = "MSTP_test_01",
         start_date      = "2020.06.01", 
         end_date        = "2020.06.17", 
         verbose         = FALSE,
         spatmeth        = "file",
         spafile         = spatial_filepath,
         out_format = "GTiff")
```

```{r}
library(raster)
library(here)
library(ggplot2)
library(viridis)

NDVI_raster <- raster(here::here("VegetationData/mongolia/VI_16Days_1Km_v6/NDVI/MYD13A2_NDVI_2020_153.tif"))
NDVI_raster <- projectRaster(NDVI_raster, crs = "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
NDVI_raster <- raster::mask(NDVI_raster, as_Spatial(mongolia_boundary))

# Converting the raster object into a dataframe
NDVI_df <- as.data.frame(NDVI_raster, xy = TRUE, na.rm = TRUE)
rownames(NDVI_df) <- c()
# Divide values by 10000 to have NDVI values between -1 and 1
ggplot() + 
  geom_raster(data = NDVI_df,
              aes(x = x, y = y, fill = MYD13A2_NDVI_2020_153/10000)) +
  geom_sf(data = mongolia_boundary, inherit.aes = FALSE, fill = NA) +
  scale_fill_viridis(name = "NDVI") +
  labs(title = "NDVI in Mongolia",
       subtitle = "01-06-2020",
       x = "Longitude",
       y = "Latitude")
  
```

## References

- `MODIS` website: https://modis.gsfc.nasa.gov/

- `MODIStsp` vignette: https://cran.r-project.org/web/packages/MODIStsp/vignettes/MODIStsp.html
